#version 330 core

in vec2 pass_textureCoords;	
in vec3 surfaceNormal;
in vec3 toLightVector[4];
in vec3 toCameraVector;
in float visibility;
in vec4 shadowCoords;
in vec3 reflectedVector;
in vec3 refractedVector;
in vec3 positionZero;

layout (location = 0) out vec4 out_Color;
layout (location = 1) out vec4 out_BrightColor;

uniform sampler2D reflectionTexture;
uniform sampler2D refractionTexture;
uniform sampler2D textureSampler;
uniform sampler2D specularMap;
uniform float usesSpecularMap;
uniform vec3 lightColor[4];
uniform vec3 attenuation[4];
uniform float shineDamper;
uniform float reflectivity;
uniform vec3 skyColor;
uniform bool isUnderwater;
uniform sampler2D shadowMap;
uniform samplerCube enviroMap;

const int pcfCount = 2;
const float totalTexels = (pcfCount * 2.0 + 1.0)  * (pcfCount * 2.0 + 1.0);
float reflectedAmount = 0.0;


void main(void){
	
	vec4 reflectColor = texture(reflectionTexture, pass_textureCoords);
	vec4 refractColor = texture(refractionTexture, pass_textureCoords);
	
	float mapSize = 4096.0;
	float texelSize = 1.0/mapSize;
	float total = 1.0;
	
	for(int x=-pcfCount; x<=pcfCount; x++){
		for(int y=-pcfCount; y<=pcfCount; y++){
			float objectNearestLight = texture(shadowMap, shadowCoords.xy + vec2(x,y) * texelSize).r;
			
			if(shadowCoords.z > objectNearestLight + .002){
				total += 1.0;
			}
			
		}
	}
	
	total /= totalTexels;
	
	float lightFactor = 1.0 - (total * shadowCoords.w);
	
	vec3 unitNormal = normalize(surfaceNormal);
	vec3 unitVectorToCamera = normalize(toCameraVector);
	
	vec3 totalDiffuse = vec3(0.0);
	vec3 totalSpecular = vec3(0.0);
	
	for(int i =0; i<4; i++){
	float distance = length(toLightVector[i]);
	float attFactor = attenuation[i].x + (attenuation[i].y * distance) + (attenuation[i].z * distance * distance);
	vec3 unitLightVector = normalize(toLightVector[i]);
	float nDot1 = dot(unitNormal, unitLightVector);
	float brightness = max(nDot1, 0.0);
	
	totalDiffuse = totalDiffuse + (brightness * lightColor[i])/attFactor;
	vec3 lightDirection = -unitLightVector;
	vec3 reflectedLightDirection = reflect(lightDirection, unitNormal);
	
	float specularFactor = dot(reflectedLightDirection, unitVectorToCamera);
	specularFactor = max(specularFactor,0.0);
	float dampedFactor = pow(specularFactor, shineDamper);
	totalSpecular = totalSpecular + (dampedFactor * reflectivity * lightColor[i])/attFactor;
	}
	totalDiffuse = max(totalDiffuse * lightFactor, 0.4);
	
	vec4 textureColor = texture(textureSampler, pass_textureCoords);
	if(textureColor.a<0.5){
		discard;
	}
	out_BrightColor = vec4(0.0);
	
	if(usesSpecularMap > 0.5){
		vec4 mapInfo = texture(specularMap, pass_textureCoords);
		totalSpecular *= mapInfo.r;
		totalDiffuse = mix(totalDiffuse, vec3(reflectColor.x,reflectColor.y,reflectColor.z), mapInfo.r);
		if(mapInfo.g > 0.5){
		out_BrightColor = textureColor + vec4(totalSpecular,1.0);
		totalDiffuse = vec3(1.0);
		}
		if(mapInfo.b > 0.5){
			reflectedAmount = 0.8;
		} 
	}
	
	
		
		
	out_Color = vec4(totalDiffuse, 1.0) * textureColor + vec4(totalSpecular,1.0);
	out_Color = mix(vec4(skyColor,1.0),out_Color, visibility);
	
	vec4 reflectedColor = texture(enviroMap, reflectedVector);
	vec4 refractedColor = texture(enviroMap, refractedVector);
	vec4 enviroColour = mix(reflectedColor, refractedColor, 0.0);
	

	out_Color = mix(out_Color, enviroColour, reflectedAmount);


	float distance = sqrt(pow(positionZero.z, 2) + pow(positionZero.x, 2));
	
	if (distance > 535 && distance < 575){
		out_Color = mix(out_Color, vec4(1.0), (distance - 535)/(575 - 535));
	}
	
	if(distance > 575){
		out_Color = vec4(1.0, 1.0, 1.0, 1.0);
	}
}