#version 400 core

in vec3 position;
in vec2 textureCoords;
in vec3 normal;


out vec2 pass_textureCoords;
out vec3 surfaceNormal;
out vec3 toLightVector[4];
out vec3 toCameraVector;
out float visibility;
out vec4 shadowCoords;
out vec3 reflectedVector;
out vec3 refractedVector;
out vec3 positionZero;


uniform mat4 transformationMatrix;
uniform mat4 projectionMatrix;
uniform mat4 viewMatrix;
uniform vec3 lightPosition[4];
uniform vec4 plane;
uniform vec3 cameraPos;

uniform float useFakeLighting;

uniform float numberOfRows;
uniform vec2  offset;

uniform mat4 toShadowMapSpace;

const float density = 0.0017;
const float gradient = 1000;
const float shadowDistance = 150.0;
const float transitionDistance = 10.0;

void main(void){
	vec4 worldPosition = transformationMatrix * vec4(position, 1.0);
	shadowCoords = toShadowMapSpace * worldPosition;
	
	gl_ClipDistance[0] = dot(worldPosition, plane);
	
	mat4 modelViewMatrix = viewMatrix * transformationMatrix;
	vec4 positionRelativeToCam = modelViewMatrix * vec4(position,1.0);
	gl_Position = projectionMatrix * positionRelativeToCam;
	pass_textureCoords = (textureCoords/numberOfRows) + offset;
	
	vec3 actualNormal = normal;
	if(useFakeLighting > 0.5){
		actualNormal = vec3(0.0,1.0,0.0);
	}
	
	surfaceNormal = (transformationMatrix * vec4(actualNormal, 0.0)).xyz;
	
	
	for(int i=0;i<4;i++){
	toLightVector[i] = lightPosition[i]
	 - worldPosition.xyz;
	}
	toCameraVector = (inverse(viewMatrix) * vec4(0.0,0.0,0.0,1.0)).xyz - worldPosition.xyz;
	
	float distance = length(positionRelativeToCam.xyz);
	visibility = exp(-pow((distance*density), gradient));
	visibility = clamp(visibility, 0.0, 1.0);
	
	distance = distance - (shadowDistance - transitionDistance);
	distance = distance/transitionDistance;
	shadowCoords.w = clamp(1.0-distance, 0.0,1.0);
	
	vec3 unitNormal = normalize(normal);
	
	vec3 viewVector = normalize(worldPosition.xyz - cameraPos);
	reflectedVector = reflect(viewVector, unitNormal);
	refractedVector = refract(viewVector, unitNormal, 1.0/1.33);
	
	positionZero = position;
}