#version 400

in vec2 pass_TextureCoords;
in vec3 surfaceNormal;
in vec3 toLightVector[4];
uniform vec3 attenuation[4];
in vec3 toCameraVector;
in float visibility;
in vec4 shadowCoords;

layout (location = 0) out vec4 out_Color;
layout (location = 1) out vec4 out_BrightColor;

uniform sampler2D backgroundTexture;
uniform sampler2D rTexture;
uniform sampler2D gTexture;
uniform sampler2D bTexture;
uniform sampler2D blendMap;
uniform sampler2D shadowMap;

uniform vec3 lightColor[4];
uniform float shineDamper;
uniform float reflectivity;
uniform vec3 skyColor;

const int pcfCount = 2;
const float totalTexels = (pcfCount * 2.0 + 1.0) * (pcfCount * 2.0 + 1.0);

void main(void) {

	float mapSize = 4096.0;
	float texelSize = 1.0/mapSize;
	float total = 0.0;
	
	for(int x=-pcfCount; x<=pcfCount; x++){
		for(int y=-pcfCount; y<=pcfCount; y++){
			float objectNearestLight = texture(shadowMap, shadowCoords.xy + vec2(x,y) * texelSize).r;
			
			if(shadowCoords.z > objectNearestLight){
				total += 1.0;
			}
			
		}
	}
	
	total /= totalTexels;
	
	float lightFactor = 1.0 - (total *shadowCoords.w);


	

	vec4 blendMapColor = texture(blendMap, pass_TextureCoords);
	
	float backTextureAmount = 1 - (blendMapColor.r = blendMapColor.g + blendMapColor.b);
	
	
	// Change for tiling
	vec2 tiledCoords = pass_TextureCoords * 120;
	vec4 backgroundTextureColor = texture(backgroundTexture, tiledCoords) * backTextureAmount;
	vec4 rTextureColor = texture(rTexture, tiledCoords) * blendMapColor.r;
	vec4 gTextureColor = texture(gTexture, tiledCoords) * blendMapColor.g;
	vec4 bTextureColor = texture(bTexture, tiledCoords) * blendMapColor.b;

	vec4 totalColor = backgroundTextureColor + rTextureColor + gTextureColor + bTextureColor;
	vec4 whiteAbyss = backgroundTextureColor + rTextureColor + gTextureColor;
	vec3 unitNormal = normalize(surfaceNormal);
	vec3 unitVectorToCamera = normalize(toCameraVector);
	vec3 totalDiffuse = vec3(0.0);
	vec3 totalSpecularity = vec3(0.0);
	
	for(int i =0;i<4;i++){
	float distance = length(toLightVector[i]);
	float attFactor = attenuation[i].x + (attenuation[i].y * distance) + (attenuation[i].z * distance * distance);
	vec3 unitLightVector = normalize(toLightVector[i]);
	float nDot1 = dot(unitNormal, unitLightVector);
	float brightness = max(nDot1, 0.0);
	totalDiffuse = totalDiffuse + (brightness * lightColor[i])/attFactor;
	vec3 lightDirection = -unitLightVector;
	vec3 reflectedLightDirection = reflect(lightDirection, unitNormal);

	float specularFactor = dot(reflectedLightDirection, unitVectorToCamera);
	specularFactor = max(specularFactor, 0.0);
	float dampedFactor = pow(specularFactor, shineDamper);

	totalSpecularity = totalSpecularity + (dampedFactor * reflectivity * lightColor[i])/attFactor;
	
	}
	totalDiffuse = max(totalDiffuse * lightFactor,0.4);
	
	out_BrightColor = vec4(0.0);

	out_Color = vec4(totalDiffuse, 1.0) * whiteAbyss + vec4(totalSpecularity, 1.0);
	out_Color = mix(vec4(skyColor, 1.0), out_Color, visibility);

}
