#version 400 core

in vec3 position;
in vec2 textureCoordinates;
in vec3 normal;
in vec3 tangent;

out vec2 pass_textureCoordinates;
out vec3 toLightVector[4];
out vec3 toCameraVector;
out float visibility;
out vec4 shadowCoords;
out vec3 reflectedVector;
out vec3 refractedVector;
out vec3 positionZero;


uniform mat4 transformationMatrix;
uniform mat4 projectionMatrix;
uniform mat4 viewMatrix;
uniform vec3 lightPositionEyeSpace[4];

uniform mat4 toShadowMapSpace;

uniform float numberOfRows;
uniform vec2 offset;
uniform vec3 cameraPos;

const float shadowDistance = 150.0;
const float transitionDistance = 10.0;

const float density = 0.0017;
const float gradient = 1000;

uniform vec4 plane;

void main(void){
	vec4 worldPosition = transformationMatrix * vec4(position,1.0);
	shadowCoords = toShadowMapSpace * worldPosition;
	
	gl_ClipDistance[0] = dot(worldPosition, plane);
	mat4 modelViewMatrix = viewMatrix * transformationMatrix;
	vec4 positionRelativeToCam = modelViewMatrix * vec4(position,1.0);
	gl_Position = projectionMatrix * positionRelativeToCam;
	
	pass_textureCoordinates = (textureCoordinates/numberOfRows) + offset;
	
	vec3 surfaceNormal = (modelViewMatrix * vec4(normal,0.0)).xyz;
	
	vec3 norm = normalize(surfaceNormal);
	vec3 tangent = normalize((modelViewMatrix * vec4(tangent, 0.0)).xyz);
	vec3 bitang = normalize(cross(norm, tangent));
	
	mat3 toTangentSpace =  mat3(
		tangent.x, bitang.x,  norm.x,
		tangent.y, bitang.y,  norm.y,
		tangent.z, bitang.z,  norm.z
	); 
	
	for(int i=0;i<4;i++){
		toLightVector[i] = toTangentSpace * (lightPositionEyeSpace[i] - positionRelativeToCam.xyz);
	}
	toCameraVector = toTangentSpace * (-positionRelativeToCam.xyz);
	
	float distance = length(positionRelativeToCam.xyz);
	visibility = exp(-pow((distance*density),gradient));
	visibility = clamp(visibility,0.0,1.0);
	
	distance = distance - (shadowDistance - transitionDistance);
	distance = distance / transitionDistance;
	shadowCoords.w = clamp(1.0-distance,0.0,1.0);
	
	vec3 unitNormal = normalize(normal);
	
	vec3 viewVector = normalize(worldPosition.xyz - cameraPos);
	reflectedVector = reflect(viewVector, unitNormal);
	refractedVector = refract(viewVector, unitNormal, 1.0/1.33);
	
	positionZero = position;
	
}